Terminals unused in grammar

   err_lex
   hash
   dol
   pourc
   an
   cote


State 143 conflicts: 4 shift/reduce
State 144 conflicts: 4 shift/reduce
State 145 conflicts: 4 shift/reduce
State 146 conflicts: 4 shift/reduce
State 147 conflicts: 4 shift/reduce
State 148 conflicts: 4 shift/reduce
State 149 conflicts: 4 shift/reduce
State 150 conflicts: 4 shift/reduce
State 151 conflicts: 4 shift/reduce


Grammar

    0 $accept: S $end

    1 $@1: /* empty */

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    3 P_DEC: P_DEC_VAR P_DEC
    4      | P_DEC_CONST P_DEC
    5      | P_DEC_TAB P_DEC
    6      | /* empty */

    7 P_DEC_TAB: LIST_IDF mc_line cst_int vrg mc_size cst_int TYPE point

    8 P_DEC_VAR: LIST_IDF TYPE point

    9 P_DEC_CONST: mc_const idf TYPE point
   10            | mc_const idf egl CST point

   11 TYPE: mc_int
   12     | mc_float
   13     | mc_char
   14     | mc_str

   15 LIST_IDF: idf pipe LIST_IDF
   16         | idf

   17 CST: cst_char
   18    | cst_str
   19    | CST_NUM

   20 CST_NUM: cst_int
   21        | cst_reel

   22 P_INST: ACC_OR_DIS P_INST
   23       | CONDITION_IF P_INST
   24       | MOVE P_INST
   25       | EXPR_ARITH P_INST
   26       | /* empty */

   27 ACC_OR_DIS: ACC
   28           | DIS

   29 ACC: mc_accept pa_ouv cst_str Dpoint aro idf pa_fer point

   30 DIS: mc_display pa_ouv cst_str Dpoint idf_DIS pa_fer point
   31    | mc_display pa_ouv cst_str pa_fer point

   32 idf_DIS: idf vrg idf_DIS
   33        | idf

   34 CONDITION_IF: mc_if pa_ouv CONDITION pa_fer Dpoint P_INST ELSE mc_end point

   35 ELSE: mc_else Dpoint P_INST
   36     | /* empty */

   37 CONDITION: pa_ouv EXPRESSION EXP_COMPA EXPRESSION pa_fer EXP_LOG CONDITION
   38          | pa_ouv EXPRESSION EXP_COMPA EXPRESSION pa_fer
   39          | mc_not EXPRESSION pa_fer EXP_LOG CONDITION
   40          | mc_not CONDITION

   41 EXPRESSION: EX1
   42           | CALCUL

   43 EX1: CST_NUM
   44    | idf

   45 EXP_LOG: mc_and
   46        | mc_or

   47 EXP_COMPA: l
   48          | g
   49          | ge
   50          | le
   51          | eq
   52          | di

   53 MOVE: mc_move idf mc_to idf P_INST mc_end point
   54     | mc_move idf mc_to cst_int P_INST mc_end point
   55     | mc_move cst_int mc_to cst_int P_INST mc_end point

   56 EXPR_ARITH: idf egl CALCUL point
   57           | idf egl CST point
   58           | idf egl idf point

   59 CALCUL: idf OPERATEUR idf
   60       | idf OPERATEUR CST_NUM
   61       | CST_NUM OPERATEUR CST_NUM
   62       | CST_NUM OPERATEUR idf
   63       | idf OPERATEUR CALCUL
   64       | CALCUL OPERATEUR idf
   65       | CST_NUM OPERATEUR CALCUL
   66       | CALCUL OPERATEUR CST_NUM
   67       | pa_ouv CALCUL pa_fer
   68       | CALCUL OPERATEUR CALCUL

   69 OPERATEUR: plus
   70          | moin
   71          | mul
   72          | slash


Terminals, with rules where they appear

$end (0) 0
error (256)
vrg (258) 7 32
mc_idf (259) 2
mc_div (260) 2
mc_prog (261) 2
mc_id (262) 2
mc_data (263) 2
mc_work (264) 2
mc_storage (265) 2
mc_section (266) 2
mc_proc (267) 2
mc_stop (268) 2
mc_run (269) 2
err_lex (270)
mc_int (271) 11
mc_char (272) 13
mc_float (273) 12
mc_str (274) 14
mc_const (275) 9 10
mc_and (276) 45
mc_or (277) 46
mc_not (278) 39 40
mc_line (279) 7
mc_size (280) 7
mc_accept (281) 29
mc_display (282) 30 31
mc_if (283) 34
mc_else (284) 35
mc_end (285) 34 53 54 55
mc_move (286) 53 54 55
mc_to (287) 53 54 55
hash (288)
dol (289)
pourc (290)
an (291)
aro (292) 29
Dpoint (293) 29 30 34 35
moin (294) 2 70
plus (295) 69
slash (296) 72
egl (297) 10 56 57 58
cote (298)
mul (299) 71
pipe (300) 15
pa_ouv (301) 29 30 31 34 37 38 67
pa_fer (302) 29 30 31 34 37 38 39 67
point (303) 2 7 8 9 10 29 30 31 34 53 54 55 56 57 58
l (304) 47
g (305) 48
ge (306) 49
le (307) 50
eq (308) 51
di (309) 52
idf (310) 2 9 10 15 16 29 32 33 44 53 54 56 57 58 59 60 62 63 64
cst_char (311) 17
cst_int (312) 7 20 54 55
cst_reel (313) 21
cst_str (314) 18 29 30 31


Nonterminals, with rules where they appear

$accept (60)
    on left: 0
S (61)
    on left: 2, on right: 0
$@1 (62)
    on left: 1, on right: 2
P_DEC (63)
    on left: 3 4 5 6, on right: 2 3 4 5
P_DEC_TAB (64)
    on left: 7, on right: 5
P_DEC_VAR (65)
    on left: 8, on right: 3
P_DEC_CONST (66)
    on left: 9 10, on right: 4
TYPE (67)
    on left: 11 12 13 14, on right: 7 8 9
LIST_IDF (68)
    on left: 15 16, on right: 7 8 15
CST (69)
    on left: 17 18 19, on right: 10 57
CST_NUM (70)
    on left: 20 21, on right: 19 43 60 61 62 65 66
P_INST (71)
    on left: 22 23 24 25 26, on right: 2 22 23 24 25 34 35 53 54 55
ACC_OR_DIS (72)
    on left: 27 28, on right: 22
ACC (73)
    on left: 29, on right: 27
DIS (74)
    on left: 30 31, on right: 28
idf_DIS (75)
    on left: 32 33, on right: 30 32
CONDITION_IF (76)
    on left: 34, on right: 23
ELSE (77)
    on left: 35 36, on right: 34
CONDITION (78)
    on left: 37 38 39 40, on right: 34 37 39 40
EXPRESSION (79)
    on left: 41 42, on right: 37 38 39
EX1 (80)
    on left: 43 44, on right: 41
EXP_LOG (81)
    on left: 45 46, on right: 37 39
EXP_COMPA (82)
    on left: 47 48 49 50 51 52, on right: 37 38
MOVE (83)
    on left: 53 54 55, on right: 24
EXPR_ARITH (84)
    on left: 56 57 58, on right: 25
CALCUL (85)
    on left: 59 60 61 62 63 64 65 66 67 68, on right: 42 56 63 64 65
    66 67 68
OPERATEUR (86)
    on left: 69 70 71 72, on right: 59 60 61 62 63 64 65 66 68


state 0

    0 $accept: . S $end

    mc_idf  shift, and go to state 1

    S  go to state 2


state 1

    2 S: mc_idf . mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    mc_div  shift, and go to state 3


state 2

    0 $accept: S . $end

    $end  shift, and go to state 4


state 3

    2 S: mc_idf mc_div . point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    point  shift, and go to state 5


state 4

    0 $accept: S $end .

    $default  accept


state 5

    2 S: mc_idf mc_div point . mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    mc_prog  shift, and go to state 6


state 6

    2 S: mc_idf mc_div point mc_prog . moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    moin  shift, and go to state 7


state 7

    2 S: mc_idf mc_div point mc_prog moin . mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    mc_id  shift, and go to state 8


state 8

    2 S: mc_idf mc_div point mc_prog moin mc_id . point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    point  shift, and go to state 9


state 9

    2 S: mc_idf mc_div point mc_prog moin mc_id point . idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    idf  shift, and go to state 10


state 10

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf . $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    $default  reduce using rule 1 ($@1)

    $@1  go to state 11


state 11

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 . point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    point  shift, and go to state 12


state 12

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point . mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    mc_data  shift, and go to state 13


state 13

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data . mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    mc_div  shift, and go to state 14


state 14

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div . point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    point  shift, and go to state 15


state 15

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point . mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    mc_work  shift, and go to state 16


state 16

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work . moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    moin  shift, and go to state 17


state 17

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin . mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    mc_storage  shift, and go to state 18


state 18

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage . mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    mc_section  shift, and go to state 19


state 19

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section . point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    point  shift, and go to state 20


state 20

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point . P_DEC mc_proc mc_div point P_INST mc_stop mc_run point

    mc_const  shift, and go to state 21
    idf       shift, and go to state 22

    $default  reduce using rule 6 (P_DEC)

    P_DEC        go to state 23
    P_DEC_TAB    go to state 24
    P_DEC_VAR    go to state 25
    P_DEC_CONST  go to state 26
    LIST_IDF     go to state 27


state 21

    9 P_DEC_CONST: mc_const . idf TYPE point
   10            | mc_const . idf egl CST point

    idf  shift, and go to state 28


state 22

   15 LIST_IDF: idf . pipe LIST_IDF
   16         | idf .

    pipe  shift, and go to state 29

    $default  reduce using rule 16 (LIST_IDF)


state 23

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC . mc_proc mc_div point P_INST mc_stop mc_run point

    mc_proc  shift, and go to state 30


state 24

    5 P_DEC: P_DEC_TAB . P_DEC

    mc_const  shift, and go to state 21
    idf       shift, and go to state 22

    $default  reduce using rule 6 (P_DEC)

    P_DEC        go to state 31
    P_DEC_TAB    go to state 24
    P_DEC_VAR    go to state 25
    P_DEC_CONST  go to state 26
    LIST_IDF     go to state 27


state 25

    3 P_DEC: P_DEC_VAR . P_DEC

    mc_const  shift, and go to state 21
    idf       shift, and go to state 22

    $default  reduce using rule 6 (P_DEC)

    P_DEC        go to state 32
    P_DEC_TAB    go to state 24
    P_DEC_VAR    go to state 25
    P_DEC_CONST  go to state 26
    LIST_IDF     go to state 27


state 26

    4 P_DEC: P_DEC_CONST . P_DEC

    mc_const  shift, and go to state 21
    idf       shift, and go to state 22

    $default  reduce using rule 6 (P_DEC)

    P_DEC        go to state 33
    P_DEC_TAB    go to state 24
    P_DEC_VAR    go to state 25
    P_DEC_CONST  go to state 26
    LIST_IDF     go to state 27


state 27

    7 P_DEC_TAB: LIST_IDF . mc_line cst_int vrg mc_size cst_int TYPE point
    8 P_DEC_VAR: LIST_IDF . TYPE point

    mc_int    shift, and go to state 34
    mc_char   shift, and go to state 35
    mc_float  shift, and go to state 36
    mc_str    shift, and go to state 37
    mc_line   shift, and go to state 38

    TYPE  go to state 39


state 28

    9 P_DEC_CONST: mc_const idf . TYPE point
   10            | mc_const idf . egl CST point

    mc_int    shift, and go to state 34
    mc_char   shift, and go to state 35
    mc_float  shift, and go to state 36
    mc_str    shift, and go to state 37
    egl       shift, and go to state 40

    TYPE  go to state 41


state 29

   15 LIST_IDF: idf pipe . LIST_IDF

    idf  shift, and go to state 22

    LIST_IDF  go to state 42


state 30

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc . mc_div point P_INST mc_stop mc_run point

    mc_div  shift, and go to state 43


state 31

    5 P_DEC: P_DEC_TAB P_DEC .

    $default  reduce using rule 5 (P_DEC)


state 32

    3 P_DEC: P_DEC_VAR P_DEC .

    $default  reduce using rule 3 (P_DEC)


state 33

    4 P_DEC: P_DEC_CONST P_DEC .

    $default  reduce using rule 4 (P_DEC)


state 34

   11 TYPE: mc_int .

    $default  reduce using rule 11 (TYPE)


state 35

   13 TYPE: mc_char .

    $default  reduce using rule 13 (TYPE)


state 36

   12 TYPE: mc_float .

    $default  reduce using rule 12 (TYPE)


state 37

   14 TYPE: mc_str .

    $default  reduce using rule 14 (TYPE)


state 38

    7 P_DEC_TAB: LIST_IDF mc_line . cst_int vrg mc_size cst_int TYPE point

    cst_int  shift, and go to state 44


state 39

    8 P_DEC_VAR: LIST_IDF TYPE . point

    point  shift, and go to state 45


state 40

   10 P_DEC_CONST: mc_const idf egl . CST point

    cst_char  shift, and go to state 46
    cst_int   shift, and go to state 47
    cst_reel  shift, and go to state 48
    cst_str   shift, and go to state 49

    CST      go to state 50
    CST_NUM  go to state 51


state 41

    9 P_DEC_CONST: mc_const idf TYPE . point

    point  shift, and go to state 52


state 42

   15 LIST_IDF: idf pipe LIST_IDF .

    $default  reduce using rule 15 (LIST_IDF)


state 43

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div . point P_INST mc_stop mc_run point

    point  shift, and go to state 53


state 44

    7 P_DEC_TAB: LIST_IDF mc_line cst_int . vrg mc_size cst_int TYPE point

    vrg  shift, and go to state 54


state 45

    8 P_DEC_VAR: LIST_IDF TYPE point .

    $default  reduce using rule 8 (P_DEC_VAR)


state 46

   17 CST: cst_char .

    $default  reduce using rule 17 (CST)


state 47

   20 CST_NUM: cst_int .

    $default  reduce using rule 20 (CST_NUM)


state 48

   21 CST_NUM: cst_reel .

    $default  reduce using rule 21 (CST_NUM)


state 49

   18 CST: cst_str .

    $default  reduce using rule 18 (CST)


state 50

   10 P_DEC_CONST: mc_const idf egl CST . point

    point  shift, and go to state 55


state 51

   19 CST: CST_NUM .

    $default  reduce using rule 19 (CST)


state 52

    9 P_DEC_CONST: mc_const idf TYPE point .

    $default  reduce using rule 9 (P_DEC_CONST)


state 53

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point . P_INST mc_stop mc_run point

    mc_accept   shift, and go to state 56
    mc_display  shift, and go to state 57
    mc_if       shift, and go to state 58
    mc_move     shift, and go to state 59
    idf         shift, and go to state 60

    $default  reduce using rule 26 (P_INST)

    P_INST        go to state 61
    ACC_OR_DIS    go to state 62
    ACC           go to state 63
    DIS           go to state 64
    CONDITION_IF  go to state 65
    MOVE          go to state 66
    EXPR_ARITH    go to state 67


state 54

    7 P_DEC_TAB: LIST_IDF mc_line cst_int vrg . mc_size cst_int TYPE point

    mc_size  shift, and go to state 68


state 55

   10 P_DEC_CONST: mc_const idf egl CST point .

    $default  reduce using rule 10 (P_DEC_CONST)


state 56

   29 ACC: mc_accept . pa_ouv cst_str Dpoint aro idf pa_fer point

    pa_ouv  shift, and go to state 69


state 57

   30 DIS: mc_display . pa_ouv cst_str Dpoint idf_DIS pa_fer point
   31    | mc_display . pa_ouv cst_str pa_fer point

    pa_ouv  shift, and go to state 70


state 58

   34 CONDITION_IF: mc_if . pa_ouv CONDITION pa_fer Dpoint P_INST ELSE mc_end point

    pa_ouv  shift, and go to state 71


state 59

   53 MOVE: mc_move . idf mc_to idf P_INST mc_end point
   54     | mc_move . idf mc_to cst_int P_INST mc_end point
   55     | mc_move . cst_int mc_to cst_int P_INST mc_end point

    idf      shift, and go to state 72
    cst_int  shift, and go to state 73


state 60

   56 EXPR_ARITH: idf . egl CALCUL point
   57           | idf . egl CST point
   58           | idf . egl idf point

    egl  shift, and go to state 74


state 61

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST . mc_stop mc_run point

    mc_stop  shift, and go to state 75


state 62

   22 P_INST: ACC_OR_DIS . P_INST

    mc_accept   shift, and go to state 56
    mc_display  shift, and go to state 57
    mc_if       shift, and go to state 58
    mc_move     shift, and go to state 59
    idf         shift, and go to state 60

    $default  reduce using rule 26 (P_INST)

    P_INST        go to state 76
    ACC_OR_DIS    go to state 62
    ACC           go to state 63
    DIS           go to state 64
    CONDITION_IF  go to state 65
    MOVE          go to state 66
    EXPR_ARITH    go to state 67


state 63

   27 ACC_OR_DIS: ACC .

    $default  reduce using rule 27 (ACC_OR_DIS)


state 64

   28 ACC_OR_DIS: DIS .

    $default  reduce using rule 28 (ACC_OR_DIS)


state 65

   23 P_INST: CONDITION_IF . P_INST

    mc_accept   shift, and go to state 56
    mc_display  shift, and go to state 57
    mc_if       shift, and go to state 58
    mc_move     shift, and go to state 59
    idf         shift, and go to state 60

    $default  reduce using rule 26 (P_INST)

    P_INST        go to state 77
    ACC_OR_DIS    go to state 62
    ACC           go to state 63
    DIS           go to state 64
    CONDITION_IF  go to state 65
    MOVE          go to state 66
    EXPR_ARITH    go to state 67


state 66

   24 P_INST: MOVE . P_INST

    mc_accept   shift, and go to state 56
    mc_display  shift, and go to state 57
    mc_if       shift, and go to state 58
    mc_move     shift, and go to state 59
    idf         shift, and go to state 60

    $default  reduce using rule 26 (P_INST)

    P_INST        go to state 78
    ACC_OR_DIS    go to state 62
    ACC           go to state 63
    DIS           go to state 64
    CONDITION_IF  go to state 65
    MOVE          go to state 66
    EXPR_ARITH    go to state 67


state 67

   25 P_INST: EXPR_ARITH . P_INST

    mc_accept   shift, and go to state 56
    mc_display  shift, and go to state 57
    mc_if       shift, and go to state 58
    mc_move     shift, and go to state 59
    idf         shift, and go to state 60

    $default  reduce using rule 26 (P_INST)

    P_INST        go to state 79
    ACC_OR_DIS    go to state 62
    ACC           go to state 63
    DIS           go to state 64
    CONDITION_IF  go to state 65
    MOVE          go to state 66
    EXPR_ARITH    go to state 67


state 68

    7 P_DEC_TAB: LIST_IDF mc_line cst_int vrg mc_size . cst_int TYPE point

    cst_int  shift, and go to state 80


state 69

   29 ACC: mc_accept pa_ouv . cst_str Dpoint aro idf pa_fer point

    cst_str  shift, and go to state 81


state 70

   30 DIS: mc_display pa_ouv . cst_str Dpoint idf_DIS pa_fer point
   31    | mc_display pa_ouv . cst_str pa_fer point

    cst_str  shift, and go to state 82


state 71

   34 CONDITION_IF: mc_if pa_ouv . CONDITION pa_fer Dpoint P_INST ELSE mc_end point

    mc_not  shift, and go to state 83
    pa_ouv  shift, and go to state 84

    CONDITION  go to state 85


state 72

   53 MOVE: mc_move idf . mc_to idf P_INST mc_end point
   54     | mc_move idf . mc_to cst_int P_INST mc_end point

    mc_to  shift, and go to state 86


state 73

   55 MOVE: mc_move cst_int . mc_to cst_int P_INST mc_end point

    mc_to  shift, and go to state 87


state 74

   56 EXPR_ARITH: idf egl . CALCUL point
   57           | idf egl . CST point
   58           | idf egl . idf point

    pa_ouv    shift, and go to state 88
    idf       shift, and go to state 89
    cst_char  shift, and go to state 46
    cst_int   shift, and go to state 47
    cst_reel  shift, and go to state 48
    cst_str   shift, and go to state 49

    CST      go to state 90
    CST_NUM  go to state 91
    CALCUL   go to state 92


state 75

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop . mc_run point

    mc_run  shift, and go to state 93


state 76

   22 P_INST: ACC_OR_DIS P_INST .

    $default  reduce using rule 22 (P_INST)


state 77

   23 P_INST: CONDITION_IF P_INST .

    $default  reduce using rule 23 (P_INST)


state 78

   24 P_INST: MOVE P_INST .

    $default  reduce using rule 24 (P_INST)


state 79

   25 P_INST: EXPR_ARITH P_INST .

    $default  reduce using rule 25 (P_INST)


state 80

    7 P_DEC_TAB: LIST_IDF mc_line cst_int vrg mc_size cst_int . TYPE point

    mc_int    shift, and go to state 34
    mc_char   shift, and go to state 35
    mc_float  shift, and go to state 36
    mc_str    shift, and go to state 37

    TYPE  go to state 94


state 81

   29 ACC: mc_accept pa_ouv cst_str . Dpoint aro idf pa_fer point

    Dpoint  shift, and go to state 95


state 82

   30 DIS: mc_display pa_ouv cst_str . Dpoint idf_DIS pa_fer point
   31    | mc_display pa_ouv cst_str . pa_fer point

    Dpoint  shift, and go to state 96
    pa_fer  shift, and go to state 97


state 83

   39 CONDITION: mc_not . EXPRESSION pa_fer EXP_LOG CONDITION
   40          | mc_not . CONDITION

    mc_not    shift, and go to state 83
    pa_ouv    shift, and go to state 98
    idf       shift, and go to state 99
    cst_int   shift, and go to state 47
    cst_reel  shift, and go to state 48

    CST_NUM     go to state 100
    CONDITION   go to state 101
    EXPRESSION  go to state 102
    EX1         go to state 103
    CALCUL      go to state 104


state 84

   37 CONDITION: pa_ouv . EXPRESSION EXP_COMPA EXPRESSION pa_fer EXP_LOG CONDITION
   38          | pa_ouv . EXPRESSION EXP_COMPA EXPRESSION pa_fer

    pa_ouv    shift, and go to state 88
    idf       shift, and go to state 99
    cst_int   shift, and go to state 47
    cst_reel  shift, and go to state 48

    CST_NUM     go to state 100
    EXPRESSION  go to state 105
    EX1         go to state 103
    CALCUL      go to state 104


state 85

   34 CONDITION_IF: mc_if pa_ouv CONDITION . pa_fer Dpoint P_INST ELSE mc_end point

    pa_fer  shift, and go to state 106


state 86

   53 MOVE: mc_move idf mc_to . idf P_INST mc_end point
   54     | mc_move idf mc_to . cst_int P_INST mc_end point

    idf      shift, and go to state 107
    cst_int  shift, and go to state 108


state 87

   55 MOVE: mc_move cst_int mc_to . cst_int P_INST mc_end point

    cst_int  shift, and go to state 109


state 88

   67 CALCUL: pa_ouv . CALCUL pa_fer

    pa_ouv    shift, and go to state 88
    idf       shift, and go to state 110
    cst_int   shift, and go to state 47
    cst_reel  shift, and go to state 48

    CST_NUM  go to state 111
    CALCUL   go to state 112


state 89

   58 EXPR_ARITH: idf egl idf . point
   59 CALCUL: idf . OPERATEUR idf
   60       | idf . OPERATEUR CST_NUM
   63       | idf . OPERATEUR CALCUL

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116
    point  shift, and go to state 117

    OPERATEUR  go to state 118


state 90

   57 EXPR_ARITH: idf egl CST . point

    point  shift, and go to state 119


state 91

   19 CST: CST_NUM .
   61 CALCUL: CST_NUM . OPERATEUR CST_NUM
   62       | CST_NUM . OPERATEUR idf
   65       | CST_NUM . OPERATEUR CALCUL

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    $default  reduce using rule 19 (CST)

    OPERATEUR  go to state 120


state 92

   56 EXPR_ARITH: idf egl CALCUL . point
   64 CALCUL: CALCUL . OPERATEUR idf
   66       | CALCUL . OPERATEUR CST_NUM
   68       | CALCUL . OPERATEUR CALCUL

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116
    point  shift, and go to state 121

    OPERATEUR  go to state 122


state 93

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run . point

    point  shift, and go to state 123


state 94

    7 P_DEC_TAB: LIST_IDF mc_line cst_int vrg mc_size cst_int TYPE . point

    point  shift, and go to state 124


state 95

   29 ACC: mc_accept pa_ouv cst_str Dpoint . aro idf pa_fer point

    aro  shift, and go to state 125


state 96

   30 DIS: mc_display pa_ouv cst_str Dpoint . idf_DIS pa_fer point

    idf  shift, and go to state 126

    idf_DIS  go to state 127


state 97

   31 DIS: mc_display pa_ouv cst_str pa_fer . point

    point  shift, and go to state 128


state 98

   37 CONDITION: pa_ouv . EXPRESSION EXP_COMPA EXPRESSION pa_fer EXP_LOG CONDITION
   38          | pa_ouv . EXPRESSION EXP_COMPA EXPRESSION pa_fer
   67 CALCUL: pa_ouv . CALCUL pa_fer

    pa_ouv    shift, and go to state 88
    idf       shift, and go to state 99
    cst_int   shift, and go to state 47
    cst_reel  shift, and go to state 48

    CST_NUM     go to state 100
    EXPRESSION  go to state 105
    EX1         go to state 103
    CALCUL      go to state 129


state 99

   44 EX1: idf .
   59 CALCUL: idf . OPERATEUR idf
   60       | idf . OPERATEUR CST_NUM
   63       | idf . OPERATEUR CALCUL

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    $default  reduce using rule 44 (EX1)

    OPERATEUR  go to state 118


state 100

   43 EX1: CST_NUM .
   61 CALCUL: CST_NUM . OPERATEUR CST_NUM
   62       | CST_NUM . OPERATEUR idf
   65       | CST_NUM . OPERATEUR CALCUL

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    $default  reduce using rule 43 (EX1)

    OPERATEUR  go to state 120


state 101

   40 CONDITION: mc_not CONDITION .

    $default  reduce using rule 40 (CONDITION)


state 102

   39 CONDITION: mc_not EXPRESSION . pa_fer EXP_LOG CONDITION

    pa_fer  shift, and go to state 130


state 103

   41 EXPRESSION: EX1 .

    $default  reduce using rule 41 (EXPRESSION)


state 104

   42 EXPRESSION: CALCUL .
   64 CALCUL: CALCUL . OPERATEUR idf
   66       | CALCUL . OPERATEUR CST_NUM
   68       | CALCUL . OPERATEUR CALCUL

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    $default  reduce using rule 42 (EXPRESSION)

    OPERATEUR  go to state 122


state 105

   37 CONDITION: pa_ouv EXPRESSION . EXP_COMPA EXPRESSION pa_fer EXP_LOG CONDITION
   38          | pa_ouv EXPRESSION . EXP_COMPA EXPRESSION pa_fer

    l   shift, and go to state 131
    g   shift, and go to state 132
    ge  shift, and go to state 133
    le  shift, and go to state 134
    eq  shift, and go to state 135
    di  shift, and go to state 136

    EXP_COMPA  go to state 137


state 106

   34 CONDITION_IF: mc_if pa_ouv CONDITION pa_fer . Dpoint P_INST ELSE mc_end point

    Dpoint  shift, and go to state 138


state 107

   53 MOVE: mc_move idf mc_to idf . P_INST mc_end point

    mc_accept   shift, and go to state 56
    mc_display  shift, and go to state 57
    mc_if       shift, and go to state 58
    mc_move     shift, and go to state 59
    idf         shift, and go to state 60

    $default  reduce using rule 26 (P_INST)

    P_INST        go to state 139
    ACC_OR_DIS    go to state 62
    ACC           go to state 63
    DIS           go to state 64
    CONDITION_IF  go to state 65
    MOVE          go to state 66
    EXPR_ARITH    go to state 67


state 108

   54 MOVE: mc_move idf mc_to cst_int . P_INST mc_end point

    mc_accept   shift, and go to state 56
    mc_display  shift, and go to state 57
    mc_if       shift, and go to state 58
    mc_move     shift, and go to state 59
    idf         shift, and go to state 60

    $default  reduce using rule 26 (P_INST)

    P_INST        go to state 140
    ACC_OR_DIS    go to state 62
    ACC           go to state 63
    DIS           go to state 64
    CONDITION_IF  go to state 65
    MOVE          go to state 66
    EXPR_ARITH    go to state 67


state 109

   55 MOVE: mc_move cst_int mc_to cst_int . P_INST mc_end point

    mc_accept   shift, and go to state 56
    mc_display  shift, and go to state 57
    mc_if       shift, and go to state 58
    mc_move     shift, and go to state 59
    idf         shift, and go to state 60

    $default  reduce using rule 26 (P_INST)

    P_INST        go to state 141
    ACC_OR_DIS    go to state 62
    ACC           go to state 63
    DIS           go to state 64
    CONDITION_IF  go to state 65
    MOVE          go to state 66
    EXPR_ARITH    go to state 67


state 110

   59 CALCUL: idf . OPERATEUR idf
   60       | idf . OPERATEUR CST_NUM
   63       | idf . OPERATEUR CALCUL

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    OPERATEUR  go to state 118


state 111

   61 CALCUL: CST_NUM . OPERATEUR CST_NUM
   62       | CST_NUM . OPERATEUR idf
   65       | CST_NUM . OPERATEUR CALCUL

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    OPERATEUR  go to state 120


state 112

   64 CALCUL: CALCUL . OPERATEUR idf
   66       | CALCUL . OPERATEUR CST_NUM
   67       | pa_ouv CALCUL . pa_fer
   68       | CALCUL . OPERATEUR CALCUL

    moin    shift, and go to state 113
    plus    shift, and go to state 114
    slash   shift, and go to state 115
    mul     shift, and go to state 116
    pa_fer  shift, and go to state 142

    OPERATEUR  go to state 122


state 113

   70 OPERATEUR: moin .

    $default  reduce using rule 70 (OPERATEUR)


state 114

   69 OPERATEUR: plus .

    $default  reduce using rule 69 (OPERATEUR)


state 115

   72 OPERATEUR: slash .

    $default  reduce using rule 72 (OPERATEUR)


state 116

   71 OPERATEUR: mul .

    $default  reduce using rule 71 (OPERATEUR)


state 117

   58 EXPR_ARITH: idf egl idf point .

    $default  reduce using rule 58 (EXPR_ARITH)


state 118

   59 CALCUL: idf OPERATEUR . idf
   60       | idf OPERATEUR . CST_NUM
   63       | idf OPERATEUR . CALCUL

    pa_ouv    shift, and go to state 88
    idf       shift, and go to state 143
    cst_int   shift, and go to state 47
    cst_reel  shift, and go to state 48

    CST_NUM  go to state 144
    CALCUL   go to state 145


state 119

   57 EXPR_ARITH: idf egl CST point .

    $default  reduce using rule 57 (EXPR_ARITH)


state 120

   61 CALCUL: CST_NUM OPERATEUR . CST_NUM
   62       | CST_NUM OPERATEUR . idf
   65       | CST_NUM OPERATEUR . CALCUL

    pa_ouv    shift, and go to state 88
    idf       shift, and go to state 146
    cst_int   shift, and go to state 47
    cst_reel  shift, and go to state 48

    CST_NUM  go to state 147
    CALCUL   go to state 148


state 121

   56 EXPR_ARITH: idf egl CALCUL point .

    $default  reduce using rule 56 (EXPR_ARITH)


state 122

   64 CALCUL: CALCUL OPERATEUR . idf
   66       | CALCUL OPERATEUR . CST_NUM
   68       | CALCUL OPERATEUR . CALCUL

    pa_ouv    shift, and go to state 88
    idf       shift, and go to state 149
    cst_int   shift, and go to state 47
    cst_reel  shift, and go to state 48

    CST_NUM  go to state 150
    CALCUL   go to state 151


state 123

    2 S: mc_idf mc_div point mc_prog moin mc_id point idf $@1 point mc_data mc_div point mc_work moin mc_storage mc_section point P_DEC mc_proc mc_div point P_INST mc_stop mc_run point .

    $default  reduce using rule 2 (S)


state 124

    7 P_DEC_TAB: LIST_IDF mc_line cst_int vrg mc_size cst_int TYPE point .

    $default  reduce using rule 7 (P_DEC_TAB)


state 125

   29 ACC: mc_accept pa_ouv cst_str Dpoint aro . idf pa_fer point

    idf  shift, and go to state 152


state 126

   32 idf_DIS: idf . vrg idf_DIS
   33        | idf .

    vrg  shift, and go to state 153

    $default  reduce using rule 33 (idf_DIS)


state 127

   30 DIS: mc_display pa_ouv cst_str Dpoint idf_DIS . pa_fer point

    pa_fer  shift, and go to state 154


state 128

   31 DIS: mc_display pa_ouv cst_str pa_fer point .

    $default  reduce using rule 31 (DIS)


state 129

   42 EXPRESSION: CALCUL .
   64 CALCUL: CALCUL . OPERATEUR idf
   66       | CALCUL . OPERATEUR CST_NUM
   67       | pa_ouv CALCUL . pa_fer
   68       | CALCUL . OPERATEUR CALCUL

    moin    shift, and go to state 113
    plus    shift, and go to state 114
    slash   shift, and go to state 115
    mul     shift, and go to state 116
    pa_fer  shift, and go to state 142

    $default  reduce using rule 42 (EXPRESSION)

    OPERATEUR  go to state 122


state 130

   39 CONDITION: mc_not EXPRESSION pa_fer . EXP_LOG CONDITION

    mc_and  shift, and go to state 155
    mc_or   shift, and go to state 156

    EXP_LOG  go to state 157


state 131

   47 EXP_COMPA: l .

    $default  reduce using rule 47 (EXP_COMPA)


state 132

   48 EXP_COMPA: g .

    $default  reduce using rule 48 (EXP_COMPA)


state 133

   49 EXP_COMPA: ge .

    $default  reduce using rule 49 (EXP_COMPA)


state 134

   50 EXP_COMPA: le .

    $default  reduce using rule 50 (EXP_COMPA)


state 135

   51 EXP_COMPA: eq .

    $default  reduce using rule 51 (EXP_COMPA)


state 136

   52 EXP_COMPA: di .

    $default  reduce using rule 52 (EXP_COMPA)


state 137

   37 CONDITION: pa_ouv EXPRESSION EXP_COMPA . EXPRESSION pa_fer EXP_LOG CONDITION
   38          | pa_ouv EXPRESSION EXP_COMPA . EXPRESSION pa_fer

    pa_ouv    shift, and go to state 88
    idf       shift, and go to state 99
    cst_int   shift, and go to state 47
    cst_reel  shift, and go to state 48

    CST_NUM     go to state 100
    EXPRESSION  go to state 158
    EX1         go to state 103
    CALCUL      go to state 104


state 138

   34 CONDITION_IF: mc_if pa_ouv CONDITION pa_fer Dpoint . P_INST ELSE mc_end point

    mc_accept   shift, and go to state 56
    mc_display  shift, and go to state 57
    mc_if       shift, and go to state 58
    mc_move     shift, and go to state 59
    idf         shift, and go to state 60

    $default  reduce using rule 26 (P_INST)

    P_INST        go to state 159
    ACC_OR_DIS    go to state 62
    ACC           go to state 63
    DIS           go to state 64
    CONDITION_IF  go to state 65
    MOVE          go to state 66
    EXPR_ARITH    go to state 67


state 139

   53 MOVE: mc_move idf mc_to idf P_INST . mc_end point

    mc_end  shift, and go to state 160


state 140

   54 MOVE: mc_move idf mc_to cst_int P_INST . mc_end point

    mc_end  shift, and go to state 161


state 141

   55 MOVE: mc_move cst_int mc_to cst_int P_INST . mc_end point

    mc_end  shift, and go to state 162


state 142

   67 CALCUL: pa_ouv CALCUL pa_fer .

    $default  reduce using rule 67 (CALCUL)


state 143

   59 CALCUL: idf . OPERATEUR idf
   59       | idf OPERATEUR idf .
   60       | idf . OPERATEUR CST_NUM
   63       | idf . OPERATEUR CALCUL

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    moin      [reduce using rule 59 (CALCUL)]
    plus      [reduce using rule 59 (CALCUL)]
    slash     [reduce using rule 59 (CALCUL)]
    mul       [reduce using rule 59 (CALCUL)]
    $default  reduce using rule 59 (CALCUL)

    OPERATEUR  go to state 118


state 144

   60 CALCUL: idf OPERATEUR CST_NUM .
   61       | CST_NUM . OPERATEUR CST_NUM
   62       | CST_NUM . OPERATEUR idf
   65       | CST_NUM . OPERATEUR CALCUL

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    moin      [reduce using rule 60 (CALCUL)]
    plus      [reduce using rule 60 (CALCUL)]
    slash     [reduce using rule 60 (CALCUL)]
    mul       [reduce using rule 60 (CALCUL)]
    $default  reduce using rule 60 (CALCUL)

    OPERATEUR  go to state 120


state 145

   63 CALCUL: idf OPERATEUR CALCUL .
   64       | CALCUL . OPERATEUR idf
   66       | CALCUL . OPERATEUR CST_NUM
   68       | CALCUL . OPERATEUR CALCUL

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    moin      [reduce using rule 63 (CALCUL)]
    plus      [reduce using rule 63 (CALCUL)]
    slash     [reduce using rule 63 (CALCUL)]
    mul       [reduce using rule 63 (CALCUL)]
    $default  reduce using rule 63 (CALCUL)

    OPERATEUR  go to state 122


state 146

   59 CALCUL: idf . OPERATEUR idf
   60       | idf . OPERATEUR CST_NUM
   62       | CST_NUM OPERATEUR idf .
   63       | idf . OPERATEUR CALCUL

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    moin      [reduce using rule 62 (CALCUL)]
    plus      [reduce using rule 62 (CALCUL)]
    slash     [reduce using rule 62 (CALCUL)]
    mul       [reduce using rule 62 (CALCUL)]
    $default  reduce using rule 62 (CALCUL)

    OPERATEUR  go to state 118


state 147

   61 CALCUL: CST_NUM . OPERATEUR CST_NUM
   61       | CST_NUM OPERATEUR CST_NUM .
   62       | CST_NUM . OPERATEUR idf
   65       | CST_NUM . OPERATEUR CALCUL

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    moin      [reduce using rule 61 (CALCUL)]
    plus      [reduce using rule 61 (CALCUL)]
    slash     [reduce using rule 61 (CALCUL)]
    mul       [reduce using rule 61 (CALCUL)]
    $default  reduce using rule 61 (CALCUL)

    OPERATEUR  go to state 120


state 148

   64 CALCUL: CALCUL . OPERATEUR idf
   65       | CST_NUM OPERATEUR CALCUL .
   66       | CALCUL . OPERATEUR CST_NUM
   68       | CALCUL . OPERATEUR CALCUL

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    moin      [reduce using rule 65 (CALCUL)]
    plus      [reduce using rule 65 (CALCUL)]
    slash     [reduce using rule 65 (CALCUL)]
    mul       [reduce using rule 65 (CALCUL)]
    $default  reduce using rule 65 (CALCUL)

    OPERATEUR  go to state 122


state 149

   59 CALCUL: idf . OPERATEUR idf
   60       | idf . OPERATEUR CST_NUM
   63       | idf . OPERATEUR CALCUL
   64       | CALCUL OPERATEUR idf .

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    moin      [reduce using rule 64 (CALCUL)]
    plus      [reduce using rule 64 (CALCUL)]
    slash     [reduce using rule 64 (CALCUL)]
    mul       [reduce using rule 64 (CALCUL)]
    $default  reduce using rule 64 (CALCUL)

    OPERATEUR  go to state 118


state 150

   61 CALCUL: CST_NUM . OPERATEUR CST_NUM
   62       | CST_NUM . OPERATEUR idf
   65       | CST_NUM . OPERATEUR CALCUL
   66       | CALCUL OPERATEUR CST_NUM .

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    moin      [reduce using rule 66 (CALCUL)]
    plus      [reduce using rule 66 (CALCUL)]
    slash     [reduce using rule 66 (CALCUL)]
    mul       [reduce using rule 66 (CALCUL)]
    $default  reduce using rule 66 (CALCUL)

    OPERATEUR  go to state 120


state 151

   64 CALCUL: CALCUL . OPERATEUR idf
   66       | CALCUL . OPERATEUR CST_NUM
   68       | CALCUL . OPERATEUR CALCUL
   68       | CALCUL OPERATEUR CALCUL .

    moin   shift, and go to state 113
    plus   shift, and go to state 114
    slash  shift, and go to state 115
    mul    shift, and go to state 116

    moin      [reduce using rule 68 (CALCUL)]
    plus      [reduce using rule 68 (CALCUL)]
    slash     [reduce using rule 68 (CALCUL)]
    mul       [reduce using rule 68 (CALCUL)]
    $default  reduce using rule 68 (CALCUL)

    OPERATEUR  go to state 122


state 152

   29 ACC: mc_accept pa_ouv cst_str Dpoint aro idf . pa_fer point

    pa_fer  shift, and go to state 163


state 153

   32 idf_DIS: idf vrg . idf_DIS

    idf  shift, and go to state 126

    idf_DIS  go to state 164


state 154

   30 DIS: mc_display pa_ouv cst_str Dpoint idf_DIS pa_fer . point

    point  shift, and go to state 165


state 155

   45 EXP_LOG: mc_and .

    $default  reduce using rule 45 (EXP_LOG)


state 156

   46 EXP_LOG: mc_or .

    $default  reduce using rule 46 (EXP_LOG)


state 157

   39 CONDITION: mc_not EXPRESSION pa_fer EXP_LOG . CONDITION

    mc_not  shift, and go to state 83
    pa_ouv  shift, and go to state 84

    CONDITION  go to state 166


state 158

   37 CONDITION: pa_ouv EXPRESSION EXP_COMPA EXPRESSION . pa_fer EXP_LOG CONDITION
   38          | pa_ouv EXPRESSION EXP_COMPA EXPRESSION . pa_fer

    pa_fer  shift, and go to state 167


state 159

   34 CONDITION_IF: mc_if pa_ouv CONDITION pa_fer Dpoint P_INST . ELSE mc_end point

    mc_else  shift, and go to state 168

    $default  reduce using rule 36 (ELSE)

    ELSE  go to state 169


state 160

   53 MOVE: mc_move idf mc_to idf P_INST mc_end . point

    point  shift, and go to state 170


state 161

   54 MOVE: mc_move idf mc_to cst_int P_INST mc_end . point

    point  shift, and go to state 171


state 162

   55 MOVE: mc_move cst_int mc_to cst_int P_INST mc_end . point

    point  shift, and go to state 172


state 163

   29 ACC: mc_accept pa_ouv cst_str Dpoint aro idf pa_fer . point

    point  shift, and go to state 173


state 164

   32 idf_DIS: idf vrg idf_DIS .

    $default  reduce using rule 32 (idf_DIS)


state 165

   30 DIS: mc_display pa_ouv cst_str Dpoint idf_DIS pa_fer point .

    $default  reduce using rule 30 (DIS)


state 166

   39 CONDITION: mc_not EXPRESSION pa_fer EXP_LOG CONDITION .

    $default  reduce using rule 39 (CONDITION)


state 167

   37 CONDITION: pa_ouv EXPRESSION EXP_COMPA EXPRESSION pa_fer . EXP_LOG CONDITION
   38          | pa_ouv EXPRESSION EXP_COMPA EXPRESSION pa_fer .

    mc_and  shift, and go to state 155
    mc_or   shift, and go to state 156

    $default  reduce using rule 38 (CONDITION)

    EXP_LOG  go to state 174


state 168

   35 ELSE: mc_else . Dpoint P_INST

    Dpoint  shift, and go to state 175


state 169

   34 CONDITION_IF: mc_if pa_ouv CONDITION pa_fer Dpoint P_INST ELSE . mc_end point

    mc_end  shift, and go to state 176


state 170

   53 MOVE: mc_move idf mc_to idf P_INST mc_end point .

    $default  reduce using rule 53 (MOVE)


state 171

   54 MOVE: mc_move idf mc_to cst_int P_INST mc_end point .

    $default  reduce using rule 54 (MOVE)


state 172

   55 MOVE: mc_move cst_int mc_to cst_int P_INST mc_end point .

    $default  reduce using rule 55 (MOVE)


state 173

   29 ACC: mc_accept pa_ouv cst_str Dpoint aro idf pa_fer point .

    $default  reduce using rule 29 (ACC)


state 174

   37 CONDITION: pa_ouv EXPRESSION EXP_COMPA EXPRESSION pa_fer EXP_LOG . CONDITION

    mc_not  shift, and go to state 83
    pa_ouv  shift, and go to state 84

    CONDITION  go to state 177


state 175

   35 ELSE: mc_else Dpoint . P_INST

    mc_accept   shift, and go to state 56
    mc_display  shift, and go to state 57
    mc_if       shift, and go to state 58
    mc_move     shift, and go to state 59
    idf         shift, and go to state 60

    $default  reduce using rule 26 (P_INST)

    P_INST        go to state 178
    ACC_OR_DIS    go to state 62
    ACC           go to state 63
    DIS           go to state 64
    CONDITION_IF  go to state 65
    MOVE          go to state 66
    EXPR_ARITH    go to state 67


state 176

   34 CONDITION_IF: mc_if pa_ouv CONDITION pa_fer Dpoint P_INST ELSE mc_end . point

    point  shift, and go to state 179


state 177

   37 CONDITION: pa_ouv EXPRESSION EXP_COMPA EXPRESSION pa_fer EXP_LOG CONDITION .

    $default  reduce using rule 37 (CONDITION)


state 178

   35 ELSE: mc_else Dpoint P_INST .

    $default  reduce using rule 35 (ELSE)


state 179

   34 CONDITION_IF: mc_if pa_ouv CONDITION pa_fer Dpoint P_INST ELSE mc_end point .

    $default  reduce using rule 34 (CONDITION_IF)
